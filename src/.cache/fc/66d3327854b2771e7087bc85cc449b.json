{"id":"node_modules/ipfs-utils/src/http/fetch.browser.js","dependencies":[{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/package.json","includedInParent":true,"mtime":1679887086003},{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/ipfs-utils/package.json","includedInParent":true,"mtime":1679887084458},{"name":"./error","loc":{"line":3,"column":45,"index":59},"parent":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/ipfs-utils/src/http/fetch.browser.js","resolved":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/ipfs-utils/src/http/error.js"},{"name":"../fetch","loc":{"line":4,"column":63,"index":133},"parent":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/ipfs-utils/src/http/fetch.browser.js","resolved":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/ipfs-utils/src/fetch.js"}],"generated":{"js":"'use strict'\n\nconst { TimeoutError, AbortError } = require('./error')\nconst { Response, Request, Headers, default: fetch } = require('../fetch')\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = (url, options = {}) =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/ipfs-utils/src/http/fetch.browser.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}}],"sources":{"node_modules/ipfs-utils/src/http/fetch.browser.js":"'use strict'\n\nconst { TimeoutError, AbortError } = require('./error')\nconst { Response, Request, Headers, default: fetch } = require('../fetch')\n\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest()\n  request.open(options.method || 'GET', url.toString(), true)\n\n  const { timeout, headers } = options\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType)\n  }\n\n  if (headers) {\n    for (const [name, value] of new Headers(headers)) {\n      request.setRequestHeader(name, value)\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort()\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress\n  }\n\n  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n  request.responseType = 'arraybuffer'\n\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = (event) => {\n      switch (event.type) {\n        case 'error': {\n          resolve(Response.error())\n          break\n        }\n        case 'load': {\n          resolve(\n            new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            })\n          )\n          break\n        }\n        case 'timeout': {\n          reject(new TimeoutError())\n          break\n        }\n        case 'abort': {\n          reject(new AbortError())\n          break\n        }\n        default: {\n          break\n        }\n      }\n    }\n    request.onerror = handleEvent\n    request.onload = handleEvent\n    request.ontimeout = handleEvent\n    request.onabort = handleEvent\n\n    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this\n    // file is a browser override so you won't get a node readable stream so ignore the error\n    request.send(options.body)\n  })\n}\n\nconst fetchWithStreaming = fetch\n\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\nconst fetchWith = (url, options = {}) =>\n  (options.onUploadProgress != null)\n    ? fetchWithProgress(url, options)\n    : fetchWithStreaming(url, options)\n\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\nconst parseHeaders = (input) => {\n  const headers = new Headers()\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ')\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1))\n    }\n  }\n\n  return headers\n}\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor (url, body, options) {\n    super(body, options)\n    Object.defineProperty(this, 'url', { value: url })\n  }\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers\n}\n"},"lineCount":143}},"error":null,"hash":"d1834a7c451efb1982cac44fe6c39037","cacheData":{"env":{}}}