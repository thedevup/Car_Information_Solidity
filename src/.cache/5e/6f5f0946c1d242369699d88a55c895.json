{"id":"node_modules/multiformats/cjs/src/bytes.js","dependencies":[{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/package.json","includedInParent":true,"mtime":1679887086003},{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/multiformats/package.json","includedInParent":true,"mtime":1679887084921}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\n\nexports.coerce = coerce;\nexports.empty = empty;\nexports.equals = equals;\nexports.fromHex = fromHex;\nexports.fromString = fromString;\nexports.isBinary = isBinary;\nexports.toHex = toHex;\nexports.toString = toString;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/multiformats/cjs/src/bytes.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}}],"sources":{"node_modules/multiformats/cjs/src/bytes.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\n\nexports.coerce = coerce;\nexports.empty = empty;\nexports.equals = equals;\nexports.fromHex = fromHex;\nexports.fromString = fromString;\nexports.isBinary = isBinary;\nexports.toHex = toHex;\nexports.toString = toString;\n"},"lineCount":46}},"error":null,"hash":"8eb0426dc1324e92adbebb167ffe19fe","cacheData":{"env":{}}}