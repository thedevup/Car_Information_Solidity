{"id":"node_modules/uint8arrays/to-string.js","dependencies":[{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/package.json","includedInParent":true,"mtime":1679887086003},{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/uint8arrays/package.json","includedInParent":true,"mtime":1679887084494},{"name":"./util/bases","loc":{"line":3,"column":22,"index":36},"parent":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/uint8arrays/to-string.js","resolved":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/uint8arrays/util/bases.js"}],"generated":{"js":"'use strict'\n\nconst bases = require('./util/bases')\n\n/**\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\n */\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array - The array to turn into a string\n * @param {SupportedEncodings} [encoding=utf8] - The encoding to use\n * @returns {string}\n */\nfunction toString (array, encoding = 'utf8') {\n  const base = bases[encoding]\n\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1)\n}\n\nmodule.exports = toString\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/uint8arrays/to-string.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/uint8arrays/to-string.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}}],"sources":{"node_modules/uint8arrays/to-string.js":"'use strict'\n\nconst bases = require('./util/bases')\n\n/**\n * @typedef {import('./util/bases').SupportedEncodings} SupportedEncodings\n */\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {Uint8Array} array - The array to turn into a string\n * @param {SupportedEncodings} [encoding=utf8] - The encoding to use\n * @returns {string}\n */\nfunction toString (array, encoding = 'utf8') {\n  const base = bases[encoding]\n\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1)\n}\n\nmodule.exports = toString\n"},"lineCount":32}},"error":null,"hash":"9e7666c725d8d94e5f21298a3c50d817","cacheData":{"env":{}}}