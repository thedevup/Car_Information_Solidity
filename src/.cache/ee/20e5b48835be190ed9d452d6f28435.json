{"id":"node_modules/it-concat/index.js","dependencies":[{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/package.json","includedInParent":true,"mtime":1679887086003},{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/it-concat/package.json","includedInParent":true,"mtime":1679887084212},{"name":"bl/BufferList","loc":{"line":1,"column":27,"index":27},"parent":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/it-concat/index.js","resolved":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/bl/BufferList.js"}],"generated":{"js":"const BufferList = require('bl/BufferList')\n\nconst TypeDefault = {\n  string: () => '',\n  buffer: () => BufferList()\n}\n\nmodule.exports = async (source, options) => {\n  options = options || {}\n\n  if (options.type && !TypeDefault[options.type]) {\n    throw new Error(`invalid type \"${options.type}\"`)\n  }\n\n  let res, type\n  for await (const chunk of source) {\n    if (!res) {\n      type = options.type || (typeof chunk === 'string' ? 'string' : 'buffer')\n      res = TypeDefault[type]()\n    }\n\n    if (type === 'string') {\n      res += chunk\n    } else {\n      res.append(chunk)\n    }\n  }\n\n  return res || TypeDefault[options.type || 'buffer']()\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/it-concat/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/it-concat/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}}],"sources":{"node_modules/it-concat/index.js":"const BufferList = require('bl/BufferList')\n\nconst TypeDefault = {\n  string: () => '',\n  buffer: () => BufferList()\n}\n\nmodule.exports = async (source, options) => {\n  options = options || {}\n\n  if (options.type && !TypeDefault[options.type]) {\n    throw new Error(`invalid type \"${options.type}\"`)\n  }\n\n  let res, type\n  for await (const chunk of source) {\n    if (!res) {\n      type = options.type || (typeof chunk === 'string' ? 'string' : 'buffer')\n      res = TypeDefault[type]()\n    }\n\n    if (type === 'string') {\n      res += chunk\n    } else {\n      res.append(chunk)\n    }\n  }\n\n  return res || TypeDefault[options.type || 'buffer']()\n}\n"},"lineCount":31}},"error":null,"hash":"c6cf53e71918656b129b2674680e8ef3","cacheData":{"env":{}}}