{"id":"node_modules/multiformats/cjs/src/hashes/hasher.js","dependencies":[{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/package.json","includedInParent":true,"mtime":1679887086003},{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/multiformats/package.json","includedInParent":true,"mtime":1679887084921},{"name":"./digest.js","loc":{"line":5,"column":21,"index":100},"parent":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/multiformats/cjs/src/hashes/hasher.js","resolved":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/multiformats/cjs/src/hashes/digest.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar digest = require('./digest.js');\n\nconst from = ({name, code, encode}) => new Hasher(name, code, encode);\nclass Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? digest.create(this.code, result) : result.then(digest$1 => digest.create(this.code, digest$1));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\n\nexports.Hasher = Hasher;\nexports.from = from;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/multiformats/cjs/src/hashes/hasher.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}}],"sources":{"node_modules/multiformats/cjs/src/hashes/hasher.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar digest = require('./digest.js');\n\nconst from = ({name, code, encode}) => new Hasher(name, code, encode);\nclass Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? digest.create(this.code, result) : result.then(digest$1 => digest.create(this.code, digest$1));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\n\nexports.Hasher = Hasher;\nexports.from = from;\n"},"lineCount":26}},"error":null,"hash":"3dcd331db12a8b26660cb0055e162777","cacheData":{"env":{}}}