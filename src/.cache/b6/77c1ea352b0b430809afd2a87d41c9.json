{"id":"node_modules/ipfs-utils/src/files/url-source.js","dependencies":[{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/package.json","includedInParent":true,"mtime":1679887086003},{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/ipfs-utils/package.json","includedInParent":true,"mtime":1679887084458},{"name":"../http","loc":{"line":3,"column":21,"index":35},"parent":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/ipfs-utils/src/files/url-source.js","resolved":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/ipfs-utils/src/http.js"}],"generated":{"js":"'use strict'\n\nconst HTTP = require('../http')\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}\n */\nconst urlSource = (url, options) => {\n  return {\n    path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n    content: readURLContent(url, options)\n  }\n}\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {AsyncIterable<Uint8Array>}\n */\nasync function * readURLContent (url, options) {\n  const http = new HTTP()\n  const response = await http.get(url, options)\n\n  yield * response.iterator()\n}\n\nmodule.exports = urlSource\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ipfs-utils/src/files/url-source.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}}],"sources":{"node_modules/ipfs-utils/src/files/url-source.js":"'use strict'\n\nconst HTTP = require('../http')\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}\n */\nconst urlSource = (url, options) => {\n  return {\n    path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),\n    content: readURLContent(url, options)\n  }\n}\n\n/**\n *\n * @param {string} url\n * @param {import(\"../types\").HTTPOptions} [options]\n * @returns {AsyncIterable<Uint8Array>}\n */\nasync function * readURLContent (url, options) {\n  const http = new HTTP()\n  const response = await http.get(url, options)\n\n  yield * response.iterator()\n}\n\nmodule.exports = urlSource\n"},"lineCount":32}},"error":null,"hash":"7e7a61c69de46a5193a2fd59c889eb95","cacheData":{"env":{}}}