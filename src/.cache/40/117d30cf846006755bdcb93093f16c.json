{"id":"node_modules/multiformats/cjs/src/bases/base.js","dependencies":[{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/package.json","includedInParent":true,"mtime":1679887086003},{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/multiformats/package.json","includedInParent":true,"mtime":1679887084921},{"name":"../../vendor/base-x.js","loc":{"line":5,"column":22,"index":101},"parent":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/multiformats/cjs/src/bases/base.js","resolved":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/multiformats/cjs/vendor/base-x.js"},{"name":"../bytes.js","loc":{"line":6,"column":20,"index":148},"parent":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/multiformats/cjs/src/bases/base.js","resolved":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/multiformats/cjs/src/bytes.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar baseX$1 = require('../../vendor/base-x.js');\nvar bytes = require('../bytes.js');\n\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nconst or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nclass Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nconst from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nconst baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = baseX$1(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => bytes.coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nconst rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};\n\nexports.Codec = Codec;\nexports.baseX = baseX;\nexports.from = from;\nexports.or = or;\nexports.rfc4648 = rfc4648;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/multiformats/cjs/src/bases/base.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}}],"sources":{"node_modules/multiformats/cjs/src/bases/base.js":"'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar baseX$1 = require('../../vendor/base-x.js');\nvar bytes = require('../bytes.js');\n\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nconst or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nclass Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nconst from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nconst baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = baseX$1(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => bytes.coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nconst rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};\n\nexports.Codec = Codec;\nexports.baseX = baseX;\nexports.from = from;\nexports.or = or;\nexports.rfc4648 = rfc4648;\n"},"lineCount":165}},"error":null,"hash":"df60f21e6f444771d9a492d0cb3afd95","cacheData":{"env":{}}}