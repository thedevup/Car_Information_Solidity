{"id":"node_modules/uint8arrays/util/bases.js","dependencies":[{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/package.json","includedInParent":true,"mtime":1679887086003},{"name":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/uint8arrays/package.json","includedInParent":true,"mtime":1679887084494},{"name":"multiformats/basics","loc":{"line":3,"column":26,"index":42},"parent":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/uint8arrays/util/bases.js","resolved":"/Users/gebruiker/Desktop/car-information-dapp/src/node_modules/multiformats/cjs/src/basics.js"}],"generated":{"js":"  'use strict'\n\nconst { bases } = require('multiformats/basics')\n\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n/**\n * @param {string} name\n * @param {string} prefix\n * @param {(buf: Uint8Array) => string} encode\n * @param {(str: string) => Uint8Array} decode\n * @returns {MultibaseCodec}\n */\nfunction createCodec (name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = new Uint8Array(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\n/**\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\n */\n\n/**\n * @type {Record<SupportedEncodings, MultibaseCodec>}\n */\nconst BASES = {\n  'utf8': string,\n  'utf-8': string,\n  'hex': bases.base16,\n  'latin1': ascii,\n  'ascii': ascii,\n  'binary': ascii,\n\n  ...bases\n}\n\nmodule.exports = BASES\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/uint8arrays/util/bases.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}}],"sources":{"node_modules/uint8arrays/util/bases.js":"  'use strict'\n\nconst { bases } = require('multiformats/basics')\n\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n/**\n * @param {string} name\n * @param {string} prefix\n * @param {(buf: Uint8Array) => string} encode\n * @param {(str: string) => Uint8Array} decode\n * @returns {MultibaseCodec}\n */\nfunction createCodec (name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: {\n      decode\n    }\n  }\n}\n\nconst string = createCodec('utf8', 'u', (buf) => {\n  const decoder = new TextDecoder('utf8')\n  return 'u' + decoder.decode(buf)\n}, (str) => {\n  const encoder = new TextEncoder()\n  return encoder.encode(str.substring(1))\n})\n\nconst ascii = createCodec('ascii', 'a', (buf) => {\n  let string = 'a'\n\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i])\n  }\n  return string\n}, (str) => {\n  str = str.substring(1)\n  const buf = new Uint8Array(str.length)\n\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i)\n  }\n\n  return buf\n})\n\n/**\n * @typedef {'utf8' | 'utf-8' | 'hex' | 'latin1' | 'ascii' | 'binary' | keyof bases } SupportedEncodings\n */\n\n/**\n * @type {Record<SupportedEncodings, MultibaseCodec>}\n */\nconst BASES = {\n  'utf8': string,\n  'utf-8': string,\n  'hex': bases.base16,\n  'latin1': ascii,\n  'ascii': ascii,\n  'binary': ascii,\n\n  ...bases\n}\n\nmodule.exports = BASES\n"},"lineCount":76}},"error":null,"hash":"ec6feb6cc5e454fffcc5b85c789d5a69","cacheData":{"env":{}}}